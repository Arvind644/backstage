name: CI Backend

on:
  push:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - 'Dockerfile.backend'
      - 'yarn.lock'
      - 'package.json'
      - 'app-config.production.yaml'
    paths-ignore:
      - "**.md"

permissions:
  id-token: write
  contents: write
  packages: write
  security-events: write
  actions: read

jobs:
  release-please:
    permissions:
      contents: write  # for google-github-actions/release-please-action to create release commit
      pull-requests: write  # for google-github-actions/release-please-action to create release PR
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    # Release-please creates a PR that tracks all changes
    steps:
      - name: Checkout
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3

      - uses: google-github-actions/release-please-action@ee9822ec2c397e8a364d634464339ac43a06e042 # v3
        id: release
        with:
          command: manifest
          token: ${{secrets.GITHUB_TOKEN}}
          default-branch: main

  build:
    if: needs.release-please.outputs.releases_created == 'true'
    needs:
      - release-please
    runs-on: ubuntu-latest

    env:
      COSIGN_EXPERIMENTAL: 1
      IMAGE_NAME_BACKEND: ghcr.io/ortelius/backstage/backend:0.0.1

    outputs:
      image-digest-backend: ${{ steps.container_info.outputs.image-digest-backend }}

    steps:
    - name: Checkout
      uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3

    - name: Setup Nodejs and npm
      uses: actions/setup-node@v2
      with:
        node-version: "16"
        cache: 'npm'

    - name: Setup yarn
      run: npm install -g yarn

    - name: Setup Nodejs with yarn caching
      uses: actions/setup-node@v2
      with:
        node-version: "16"
        cache: yarn

    - run: yarn install --immutable --immutable-cache --check-cache
    - run: yarn tsc
    - run: yarn lint:all
    - run: yarn test:all
    - run: yarn build

    - name: Upload backend artifact
      uses: actions/upload-artifact@v2
      with:
        name: backend
        path: packages/backend/dist
        retention-days: 5
        if-no-files-found: error

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container registry
      uses: docker/login-action@v1
      env:
        GITHUB_USER: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}

    - name: Build & Push Docker Image Backend
      run: |
        revision="$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"
        DOCKER_BUILDKIT=1 docker build \
         -t "${IMAGE_NAME_BACKEND}" -f ./Dockerfile.backend \
         --label "org.opencontainers.image.source=https://github.com/ortelius/backstage/packages/backend" \
         --label "org.opencontainers.image.created=$(date --iso-8601=seconds)" \
         --label "org.opencontainers.image.title=Ortelius Backstage Backend" \
         --label "org.opencontainers.image.revision=${revision}" \
         --label "org.opencontainers.image.version=${GITHUB_REF_NAME}" \
         --label "org.opencontainers.image.vendor=ortelius" \
          .

    - name: Run Trivy vulnerability scanner backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/ortelius/backstage/backend:0.0.1'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: '${{matrix.arch}}-container-trivy-results-backend.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'

    - name: Docker Push Backend
      run: |-
        docker push --all-tags ghcr.io/ortelius/backstage/backend

    - name: Generate SBOM
      uses: anchore/sbom-action@448520c4f19577ffce70a8317e619089054687e3 # v0.13.4
      with:
        image: ${{ env.IMAGE_TAG }}
        artifact-name: sbom-backstage
        output-file: ./sbom-backstage.spdx.json

    - name: Attach SBOM to release
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
      with:
        tag_name: ${{ needs.release-please.outputs.tag_name }}
        files: ./sbom-backstage.spdx.json

    - name: Get container info Backend
      id: container_info_backend
      run: |
        image_digest="$(docker inspect "${IMAGE_NAME}" --format '{{ index .RepoDigests 0 }}' | awk -F '@' '{ print $2 }')"
        echo "::set-output name=image-digest-backend::${image_digest}"
